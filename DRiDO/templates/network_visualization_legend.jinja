<html>

<head>
    <style>
        .controls {
            left: 1500px;
            width: 420px;
            top: 10px;
            bottom: 0;
            font-size: 16px;
            padding: 20px;
            border-radius: 40px;
            border: 4px solid #576E86;
        }

        .controls label {
            display: block;
            font-family: arial;
            font-size: 14px;
            font-weight: 200;
        }

        .controls input {
            display: block;
            width: 100%;
            margin: 5px 0;
        }

        .container {
            display: grid;
            grid-template-columns: 420px 1600px;
            grid-gap: 160px;
            align-items: center;
            padding-left: 10px;
            padding-top: 10px;
        }

        .legend {
            background-color: #fefefe;
            font-family: arial;
            font-size: 12px;
            font-weight: 200;
        }

        .nodes circle {}
        .controls input[type=submit],
        .controls input[type=button],
        .controls input[type=text],
        .controls textarea,
        .controls label {
            font-family: "Nunito", sans-serif;
            font-size: 18px;
        }

        .controls label {
            display: block;
            margin-bottom: 10px;
        }

        .controls label>span {
            display: inline-block;
            float: left;
            width: 150px;
        }

        .controls input[type=text] {
            background: transparent;
            border: none;
            border-bottom: 3px dashed #83A4C5;
            outline: none;
            padding: 0px 0px 0px 0px;
        }

        .controls textarea {
            padding: 0px 0px 0px 0px;
            background: transparent;
            outline: none;
            border: none;
            border-bottom: 3px dashed #83A4C5;
            width: 275px;
            overflow: hidden;
            resize: none;
            height: 20px;
        }

        .controls textarea:focus,
        .controls input[type=text]:focus {
            border-bottom: 3px dashed #DC143C;
        }

        .controls input[type=submit],
        .controls input[type=button] {
            background: #576E86;
            border: none;
            padding: 8px 10px 8px 10px;
            border-radius: 5px;
            color: #fff;
            font-variant: small-caps;
        }

        .controls input[type=submit]:hover,
        .controls input[type=button]:hover {
            background: #394D61;
        }

        .controls input[type=range] {
            -webkit-appearance: none;
            width: 100%;
            height: 1px;
            background: #576E86;
            outline: none;
            opacity: 0.7;
            -webkit-transition: .2s;
            transition: opacity .2s;
            margin-bottom: 20px;
        }

        .controls input[type=range]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 12px;
            height: 12px;
            background: #02075d;
            cursor: pointer;
            border-radius: 50%;
        }

        .controls input[type=range]::-moz-range-thumb {
            width: 12px;
            height: 12px;
            background: #02075d;
            cursor: pointer;
        }

        .visualization {
            width: 1200px;
            height: 1000px;
        }
    </style>
</head>

<body>
    <div id='tooltip'></div>
    <div class="container">
        <div class='controls'></div>
        <svg width="1200" height="1000" id="chart"></svg>
    </div>
    <script src="https://d3js.org/d3.v4.js"></script>
    <script src="https://unpkg.com/textures@1.2.0/dist/textures.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/pdfkit@0.10.0/js/pdfkit.standalone.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/svg-to-pdfkit@0.1.8/source.js"></script>


    <script>
        var graph = {{ graph_data | tojson(indent = 2) }};
        var link, node, initial_layout;

        var svg = d3.select("#chart"),
            width = +svg.attr("width"),
            height = +svg.attr("height"),
            radius = 14;

        var textureGenerators = [
            function () {
                return textures.lines().size(0.1).strokeWidth(6).background("#fff");
            },
            function () {
                return textures.lines().size(7).strokeWidth(3.5).background("#fff");
            },
            function () {
                return textures.circles().size(6).radius(2).background("#fff");
            },
            function () {
                return textures.paths().d("waves").thicker(1.2).background("#fff");
            }
        ]

        textureScale = d3.scaleOrdinal(textureGenerators);
        colorScale = d3.scaleOrdinal(["#4e79a7", "#e15759", "#76b7b2", "#59a14f", "#edc949", "#af7aa1", "#ff9da7", "#9c755f", "#bab0ab"]);

        function colorizeTexture(texture, color) {
            var texture = texture.stroke(color);
            if (texture.fill) {
                texture.fill(color);
            }
            return texture;
        }

        const group2texture = function () {
            var index = 0;
            const mapping = new Map();
            function _inner(group) {
                if (!mapping.has(group)) {
                    const n_colors = colorScale.range().length;
                    const color = colorScale(index % n_colors);
                    const texture = textureScale(Math.floor(index / n_colors));
                    const color_texture = colorizeTexture(texture(), color);
                    svg.call(color_texture);
                    mapping.set(group, color_texture.url());
                    index += 1;
                }
                return mapping.get(group);
            }
            return _inner
        }();

        const unique_groups = [...new Set(graph.nodes.map(n => n.group))];

        for (const g of unique_groups) {
            _ = group2texture(g);
        }

        function plotLegend() {
            let col_width = 250,
                row_height = 35,
                marker_radius = 10,
                num_cols = 2,
                num_rows = Math.ceil(unique_groups.length / num_cols);

            var legend = svg.append("g")
            .attr("class", "legend")
                .attr("transform", "translate(" + (num_cols * col_width) + "," + ( num_rows * row_height) + ")");

            legend.selectAll("circle")
                .data(unique_groups)
                .enter().append("circle")
                .attr("r", marker_radius)
                .attr("cx", function (d, i) { return ((i % num_cols) * col_width) })
                .attr("cy", function (d, i) { return Math.floor(i / num_cols) * row_height })
                .attr("stroke", "#aaa")
                .attr("fill", function (d) {
                    return group2texture(d);
                });
            legend.selectAll("text")
                .data(unique_groups)
                .enter().append("text")
                .attr("x", function (d, i) { return (2 * marker_radius) + ((i % num_cols) * col_width) })
                .attr("y", function (d, i) { return Math.floor(i / num_cols) * row_height })
                .attr("dy", function (d, i) { return (d.split("\n").length > 1) ? "-0.5em" : "0.5em"})
                .text(function(d) {
                     return d.split("\n")[0];
                })
                .each(function(d) {
                      this._current = d;
                })
                .append("tspan")
                .attr("dy", "1em")
                .attr("x", function (d, i) { return (2 * marker_radius) + ((i % num_cols) * col_width) })
                .text(function(d) {
                  return d.split("\n")[1];
                })
                .each(function(d) {
                  this._current = d;
                });
        }

        function makeButton(btnText, callback) {
            var btn = d3.select(".controls")
                .append("input");
            btn.attr("type", "button")
                .attr("value", btnText);
            btn.on("click", callback)
        }

        function makeTextBox(id, label) {
            d3.select(".controls")
                .append("label")
                .text(label);
            var textbox = d3.select(".controls")
                .append("input")
                .attr("id", id)
                .attr("type", "text");
            return textbox;
        }

        function svgToPdf() {
            var svg = d3.select('svg').node();
            const doc = new window.PDFDocument({ size: [900, 900] });
            const chunks = [];

            var a = document.createElement("a");
            document.body.appendChild(a);
            a.style = "display: none";

            const stream = doc.pipe({
                // writable stream implementation
                write: (chunk) => chunks.push(chunk),
                end: () => {
                    const pdfBlob = new Blob(chunks, {
                        type: 'application/octet-stream'
                    });
                    var blobUrl = URL.createObjectURL(pdfBlob);
                    a.href = blobUrl;
                    a.download = $('#filename').val();
                    a.click();
                    window.URL.revokeObjectURL(blobUrl);
                },
                on: (event, action) => { },
                once: (...args) => { },
                emit: (...args) => { },
            });
            window.SVGtoPDF(doc, svg, 0, 0, { useCSS: true });
            doc.end();
        };

        function svgToPng() {
            saveSvgAsPng(document.getElementById("chart"), "chart.png");
        }
        makeTextBox("filename", "Filename")
        makeButton("save graph as pdf", svgToPdf);
        plotLegend();
    </script>
</body>

</html>